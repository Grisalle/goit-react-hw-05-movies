{"version":3,"file":"static/js/906.b2473372.chunk.js","mappings":"ySAEMA,EAAW,gCACXC,EAAU,mCAEHC,EAAmB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFV,cAC3BG,EAD2B,yBAI1BA,EAASC,KAAKC,SAJY,2CAAH,qDAOnBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,4DACyEO,IAFlE,uBACtBH,EADsB,EACtBA,KADsB,kBAIvBA,EAAKC,SAJkB,2CAAH,sDAOhBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDU,EADC,oBACkBT,IAFV,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBM,EAAgB,mCAAG,WAAMD,GAAN,uFACPP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDU,EADC,4BAC0BT,EAD1B,oBADO,cACxBG,EADwB,yBAIvBA,EAASC,KAAKO,MAJS,2CAAH,sDAOhBC,EAAiB,mCAAG,WAAMH,GAAN,uFACRP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDU,EADC,4BAC0BT,EAD1B,2BADQ,cACzBG,EADyB,yBAIxBA,EAASC,KAAKC,SAJU,2CAAH,qD,8IChC9B,GAAiB,E,SCoFjB,EAhFmB,WACjB,OAAwCQ,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,QAAO,IACvBC,EAAab,EAAac,IAAI,SA6BpC,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,gGAEZH,EAFY,wDAKjBP,GAAW,GALM,UAOWd,EAAAA,EAAAA,IAAiBqB,GAP5B,OAOXI,EAPW,OAQjBb,EAAea,GACfN,EAAcO,QAAUD,EATP,kDAWjBE,QAAQC,IAAI,UAAZ,MACAZ,EAAS,KAAMa,SAZE,yBAcjBf,GAAW,GAdM,6EAAH,qDAiBlBU,GACD,GAAE,CAACH,KAGF,4BACE,kBAAMS,SA7BW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,cAAcC,SAASC,WAAWH,MAClDxB,EAAgB,CAAER,MAAOgC,GAC1B,EAyBiCI,UAAWC,EAAAA,KAAzC,WACE,kBAAOD,UAAWC,EAAAA,MAAlB,UACE,kBACEC,KAAK,aACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZN,UAAWC,EAAAA,WAGf,mBAAQE,KAAK,SAASH,UAAWC,EAAAA,UAAjC,UACE,2CAGJ,2BACGzB,IAAW,wCACD,OAAVE,IACC,oFAEF,eAAIsB,UAAWC,EAAAA,iBAAf,SACmB,IAAhB3B,GACCA,EAAYiC,KAAI,SAAAC,GACd,OACE,eAAkBR,UAAWC,EAAAA,iBAA7B,UACE,SAAC,KAAD,CACEQ,MAAO,CAAEC,KAAM9B,GACf+B,GAAE,kBAAaH,EAAKI,IACpBZ,UAAWC,EAAAA,iBAHb,SAKGO,EAAKK,SANDL,EAAKI,GAUjB,WAKZ,C","sources":["api/fetchMovie.js","pages/MoviesPage/MoviesPage.module.css","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4bf52262cafa45f4a78d30477a8ff03d';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect, useRef } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMovieByName } from 'api/fetchMovie';\nimport css from './MoviesPage.module.css';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  const moviesListRef = useRef([]);\n  const queryValue = searchParams.get('query');\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const value = e.currentTarget.elements.moviesName.value;\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    const SearchMovies = async () => {\n      try {\n        if (!queryValue) {\n          return;\n        }\n        setLoading(true);\n\n        const searchResults = await fetchMovieByName(queryValue);\n        setSearchFilms(searchResults);\n        moviesListRef.current = searchResults;\n      } catch (error) {\n        console.log('error: ', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    SearchMovies();\n  }, [queryValue]);\n\n  return (\n    <div>\n      <form onSubmit={onFormSubmit} className={css.form}>\n        <label className={css.label}>\n          <input\n            name=\"moviesName\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            className={css.input}\n          />\n        </label>\n        <button type=\"submit\" className={css.btnSearch}>\n          <span>Search</span>\n        </button>\n      </form>\n      <div>\n        {loading && <div>Loading...</div>}\n        {error !== null && (\n          <p>There is no movies with this request. Please, try again</p>\n        )}\n        <ul className={css.moviesSearchList}>\n          {searchFilms !== 0 &&\n            searchFilms.map(film => {\n              return (\n                <li key={film.id} className={css.moviesSearchItem}>\n                  <Link\n                    state={{ from: location }}\n                    to={`/movies/${film.id}`}\n                    className={css.moviesSearchLink}\n                  >\n                    {film.title}\n                  </Link>\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["BASE_URL","API_KEY","fetchTrendingMovies","axios","response","data","results","fetchMovieByName","query","fetchMovieDetails","movieId","fetchMovieActors","cast","fetchMovieReviews","useSearchParams","searchParams","setSearchParams","useState","searchFilms","setSearchFilms","loading","setLoading","error","setError","location","useLocation","moviesListRef","useRef","queryValue","get","useEffect","SearchMovies","searchResults","current","console","log","message","onSubmit","e","preventDefault","value","currentTarget","elements","moviesName","className","css","name","type","autoComplete","autoFocus","placeholder","map","film","state","from","to","id","title"],"sourceRoot":""}